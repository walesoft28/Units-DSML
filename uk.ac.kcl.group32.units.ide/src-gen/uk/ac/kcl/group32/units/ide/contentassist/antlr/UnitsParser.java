/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.group32.units.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.group32.units.ide.contentassist.antlr.internal.InternalUnitsParser;
import uk.ac.kcl.group32.units.services.UnitsGrammarAccess;

public class UnitsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(UnitsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, UnitsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementsAccess().getAlternatives(), "rule__Statements__Alternatives");
			builder.put(grammarAccess.getIntExpressionAccess().getAlternatives(), "rule__IntExpression__Alternatives");
			builder.put(grammarAccess.getMassUnitsAccess().getAlternatives(), "rule__MassUnits__Alternatives");
			builder.put(grammarAccess.getTimeUnitsAccess().getAlternatives(), "rule__TimeUnits__Alternatives");
			builder.put(grammarAccess.getLengthUnitsAccess().getAlternatives(), "rule__LengthUnits__Alternatives");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getMassConversionAccess().getGroup(), "rule__MassConversion__Group__0");
			builder.put(grammarAccess.getLengthConversionAccess().getGroup(), "rule__LengthConversion__Group__0");
			builder.put(grammarAccess.getTimeConversionAccess().getGroup(), "rule__TimeConversion__Group__0");
			builder.put(grammarAccess.getREALAccess().getGroup(), "rule__REAL__Group__0");
			builder.put(grammarAccess.getUnitsAccess().getStatementAssignment(), "rule__Units__StatementAssignment");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3(), "rule__VariableDeclaration__ValueAssignment_3");
			builder.put(grammarAccess.getMassConversionAccess().getMassValueAssignment_1(), "rule__MassConversion__MassValueAssignment_1");
			builder.put(grammarAccess.getMassConversionAccess().getInitialMassValueAssignment_3(), "rule__MassConversion__InitialMassValueAssignment_3");
			builder.put(grammarAccess.getMassConversionAccess().getConvertedMassValueAssignment_6(), "rule__MassConversion__ConvertedMassValueAssignment_6");
			builder.put(grammarAccess.getLengthConversionAccess().getLengthValueAssignment_1(), "rule__LengthConversion__LengthValueAssignment_1");
			builder.put(grammarAccess.getLengthConversionAccess().getInitialLengthAssignment_3(), "rule__LengthConversion__InitialLengthAssignment_3");
			builder.put(grammarAccess.getLengthConversionAccess().getConvertedLengthAssignment_6(), "rule__LengthConversion__ConvertedLengthAssignment_6");
			builder.put(grammarAccess.getTimeConversionAccess().getTimeAssignment_1(), "rule__TimeConversion__TimeAssignment_1");
			builder.put(grammarAccess.getTimeConversionAccess().getInitialTimeAssignment_3(), "rule__TimeConversion__InitialTimeAssignment_3");
			builder.put(grammarAccess.getTimeConversionAccess().getConvertedTimeAssignment_6(), "rule__TimeConversion__ConvertedTimeAssignment_6");
			builder.put(grammarAccess.getIntLiteralAccess().getValAssignment(), "rule__IntLiteral__ValAssignment");
			builder.put(grammarAccess.getRealLiteralAccess().getValAssignment(), "rule__RealLiteral__ValAssignment");
			builder.put(grammarAccess.getIntVarExpressionAccess().getVarAssignment(), "rule__IntVarExpression__VarAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private UnitsGrammarAccess grammarAccess;

	@Override
	protected InternalUnitsParser createParser() {
		InternalUnitsParser result = new InternalUnitsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UnitsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UnitsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
