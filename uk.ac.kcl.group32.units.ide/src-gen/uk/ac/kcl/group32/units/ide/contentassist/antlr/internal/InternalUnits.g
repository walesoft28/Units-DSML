/*
 * generated by Xtext 2.24.0
 */
grammar InternalUnits;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.group32.units.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.group32.units.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.group32.units.services.UnitsGrammarAccess;

}
@parser::members {
	private UnitsGrammarAccess grammarAccess;

	public void setGrammarAccess(UnitsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleUnits
entryRuleUnits
:
{ before(grammarAccess.getUnitsRule()); }
	 ruleUnits
{ after(grammarAccess.getUnitsRule()); } 
	 EOF 
;

// Rule Units
ruleUnits 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnitsAccess().getStatementAssignment()); }
		(rule__Units__StatementAssignment)*
		{ after(grammarAccess.getUnitsAccess().getStatementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatements
entryRuleStatements
:
{ before(grammarAccess.getStatementsRule()); }
	 ruleStatements
{ after(grammarAccess.getStatementsRule()); } 
	 EOF 
;

// Rule Statements
ruleStatements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementsAccess().getAlternatives()); }
		(rule__Statements__Alternatives)
		{ after(grammarAccess.getStatementsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMassConversion
entryRuleMassConversion
:
{ before(grammarAccess.getMassConversionRule()); }
	 ruleMassConversion
{ after(grammarAccess.getMassConversionRule()); } 
	 EOF 
;

// Rule MassConversion
ruleMassConversion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMassConversionAccess().getGroup()); }
		(rule__MassConversion__Group__0)
		{ after(grammarAccess.getMassConversionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLengthConversion
entryRuleLengthConversion
:
{ before(grammarAccess.getLengthConversionRule()); }
	 ruleLengthConversion
{ after(grammarAccess.getLengthConversionRule()); } 
	 EOF 
;

// Rule LengthConversion
ruleLengthConversion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLengthConversionAccess().getGroup()); }
		(rule__LengthConversion__Group__0)
		{ after(grammarAccess.getLengthConversionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeConversion
entryRuleTimeConversion
:
{ before(grammarAccess.getTimeConversionRule()); }
	 ruleTimeConversion
{ after(grammarAccess.getTimeConversionRule()); } 
	 EOF 
;

// Rule TimeConversion
ruleTimeConversion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeConversionAccess().getGroup()); }
		(rule__TimeConversion__Group__0)
		{ after(grammarAccess.getTimeConversionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntExpression
entryRuleIntExpression
:
{ before(grammarAccess.getIntExpressionRule()); }
	 ruleIntExpression
{ after(grammarAccess.getIntExpressionRule()); } 
	 EOF 
;

// Rule IntExpression
ruleIntExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntExpressionAccess().getAlternatives()); }
		(rule__IntExpression__Alternatives)
		{ after(grammarAccess.getIntExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValAssignment()); }
		(rule__IntLiteral__ValAssignment)
		{ after(grammarAccess.getIntLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValAssignment()); }
		(rule__RealLiteral__ValAssignment)
		{ after(grammarAccess.getRealLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntVarExpression
entryRuleIntVarExpression
:
{ before(grammarAccess.getIntVarExpressionRule()); }
	 ruleIntVarExpression
{ after(grammarAccess.getIntVarExpressionRule()); } 
	 EOF 
;

// Rule IntVarExpression
ruleIntVarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
		(rule__IntVarExpression__VarAssignment)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleREAL
entryRuleREAL
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getREALAccess().getGroup()); }
		(rule__REAL__Group__0)
		{ after(grammarAccess.getREALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Rule MassUnits
ruleMassUnits
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMassUnitsAccess().getAlternatives()); }
		(rule__MassUnits__Alternatives)
		{ after(grammarAccess.getMassUnitsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TimeUnits
ruleTimeUnits
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitsAccess().getAlternatives()); }
		(rule__TimeUnits__Alternatives)
		{ after(grammarAccess.getTimeUnitsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule LengthUnits
ruleLengthUnits
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLengthUnitsAccess().getAlternatives()); }
		(rule__LengthUnits__Alternatives)
		{ after(grammarAccess.getLengthUnitsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementsAccess().getMassConversionParserRuleCall_0()); }
		ruleMassConversion
		{ after(grammarAccess.getStatementsAccess().getMassConversionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getLengthConversionParserRuleCall_1()); }
		ruleLengthConversion
		{ after(grammarAccess.getStatementsAccess().getLengthConversionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getTimeConversionParserRuleCall_2()); }
		ruleTimeConversion
		{ after(grammarAccess.getStatementsAccess().getTimeConversionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getVariableDeclarationParserRuleCall_3()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getStatementsAccess().getVariableDeclarationParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntExpressionAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getIntExpressionAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntExpressionAccess().getIntVarExpressionParserRuleCall_1()); }
		ruleIntVarExpression
		{ after(grammarAccess.getIntExpressionAccess().getIntVarExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getIntExpressionAccess().getRealLiteralParserRuleCall_2()); }
		ruleRealLiteral
		{ after(grammarAccess.getIntExpressionAccess().getRealLiteralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassUnits__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMassUnitsAccess().getKgEnumLiteralDeclaration_0()); }
		('kg')
		{ after(grammarAccess.getMassUnitsAccess().getKgEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMassUnitsAccess().getGEnumLiteralDeclaration_1()); }
		('g')
		{ after(grammarAccess.getMassUnitsAccess().getGEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnits__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitsAccess().getHrEnumLiteralDeclaration_0()); }
		('hr')
		{ after(grammarAccess.getTimeUnitsAccess().getHrEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getMEnumLiteralDeclaration_1()); }
		('m')
		{ after(grammarAccess.getTimeUnitsAccess().getMEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getSEnumLiteralDeclaration_2()); }
		('s')
		{ after(grammarAccess.getTimeUnitsAccess().getSEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthUnits__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLengthUnitsAccess().getKmEnumLiteralDeclaration_0()); }
		('km')
		{ after(grammarAccess.getLengthUnitsAccess().getKmEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getLengthUnitsAccess().getMEnumLiteralDeclaration_1()); }
		('m')
		{ after(grammarAccess.getLengthUnitsAccess().getMEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getLengthUnitsAccess().getCmEnumLiteralDeclaration_2()); }
		('cm')
		{ after(grammarAccess.getLengthUnitsAccess().getCmEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getLetKeyword_0()); }
	'let'
	{ after(grammarAccess.getVariableDeclarationAccess().getLetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
	(rule__VariableDeclaration__ValueAssignment_3)
	{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MassConversion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MassConversion__Group__0__Impl
	rule__MassConversion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMassConversionAccess().getConvertKeyword_0()); }
	'convert'
	{ after(grammarAccess.getMassConversionAccess().getConvertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MassConversion__Group__1__Impl
	rule__MassConversion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMassConversionAccess().getMassValueAssignment_1()); }
	(rule__MassConversion__MassValueAssignment_1)
	{ after(grammarAccess.getMassConversionAccess().getMassValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MassConversion__Group__2__Impl
	rule__MassConversion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMassConversionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getMassConversionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MassConversion__Group__3__Impl
	rule__MassConversion__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMassConversionAccess().getInitialMassValueAssignment_3()); }
	(rule__MassConversion__InitialMassValueAssignment_3)
	{ after(grammarAccess.getMassConversionAccess().getInitialMassValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MassConversion__Group__4__Impl
	rule__MassConversion__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMassConversionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getMassConversionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MassConversion__Group__5__Impl
	rule__MassConversion__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMassConversionAccess().getToKeyword_5()); }
	'to'
	{ after(grammarAccess.getMassConversionAccess().getToKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MassConversion__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMassConversionAccess().getConvertedMassValueAssignment_6()); }
	(rule__MassConversion__ConvertedMassValueAssignment_6)
	{ after(grammarAccess.getMassConversionAccess().getConvertedMassValueAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LengthConversion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthConversion__Group__0__Impl
	rule__LengthConversion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthConversionAccess().getConvertKeyword_0()); }
	'convert'
	{ after(grammarAccess.getLengthConversionAccess().getConvertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthConversion__Group__1__Impl
	rule__LengthConversion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthConversionAccess().getLengthValueAssignment_1()); }
	(rule__LengthConversion__LengthValueAssignment_1)
	{ after(grammarAccess.getLengthConversionAccess().getLengthValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthConversion__Group__2__Impl
	rule__LengthConversion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthConversionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getLengthConversionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthConversion__Group__3__Impl
	rule__LengthConversion__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthConversionAccess().getInitialLengthAssignment_3()); }
	(rule__LengthConversion__InitialLengthAssignment_3)
	{ after(grammarAccess.getLengthConversionAccess().getInitialLengthAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthConversion__Group__4__Impl
	rule__LengthConversion__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthConversionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getLengthConversionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthConversion__Group__5__Impl
	rule__LengthConversion__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthConversionAccess().getToKeyword_5()); }
	'to'
	{ after(grammarAccess.getLengthConversionAccess().getToKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthConversion__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthConversionAccess().getConvertedLengthAssignment_6()); }
	(rule__LengthConversion__ConvertedLengthAssignment_6)
	{ after(grammarAccess.getLengthConversionAccess().getConvertedLengthAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeConversion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeConversion__Group__0__Impl
	rule__TimeConversion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeConversionAccess().getConvertKeyword_0()); }
	'convert'
	{ after(grammarAccess.getTimeConversionAccess().getConvertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeConversion__Group__1__Impl
	rule__TimeConversion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeConversionAccess().getTimeAssignment_1()); }
	(rule__TimeConversion__TimeAssignment_1)
	{ after(grammarAccess.getTimeConversionAccess().getTimeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeConversion__Group__2__Impl
	rule__TimeConversion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeConversionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getTimeConversionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeConversion__Group__3__Impl
	rule__TimeConversion__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeConversionAccess().getInitialTimeAssignment_3()); }
	(rule__TimeConversion__InitialTimeAssignment_3)
	{ after(grammarAccess.getTimeConversionAccess().getInitialTimeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeConversion__Group__4__Impl
	rule__TimeConversion__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeConversionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getTimeConversionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeConversion__Group__5__Impl
	rule__TimeConversion__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeConversionAccess().getToKeyword_5()); }
	'to'
	{ after(grammarAccess.getTimeConversionAccess().getToKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeConversion__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeConversionAccess().getConvertedTimeAssignment_6()); }
	(rule__TimeConversion__ConvertedTimeAssignment_6)
	{ after(grammarAccess.getTimeConversionAccess().getConvertedTimeAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	(RULE_INT)?
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Units__StatementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnitsAccess().getStatementStatementsParserRuleCall_0()); }
		ruleStatements
		{ after(grammarAccess.getUnitsAccess().getStatementStatementsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__MassValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMassConversionAccess().getMassValueIntExpressionParserRuleCall_1_0()); }
		ruleIntExpression
		{ after(grammarAccess.getMassConversionAccess().getMassValueIntExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__InitialMassValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMassConversionAccess().getInitialMassValueMassUnitsEnumRuleCall_3_0()); }
		ruleMassUnits
		{ after(grammarAccess.getMassConversionAccess().getInitialMassValueMassUnitsEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassConversion__ConvertedMassValueAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMassConversionAccess().getConvertedMassValueMassUnitsEnumRuleCall_6_0()); }
		ruleMassUnits
		{ after(grammarAccess.getMassConversionAccess().getConvertedMassValueMassUnitsEnumRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__LengthValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLengthConversionAccess().getLengthValueIntExpressionParserRuleCall_1_0()); }
		ruleIntExpression
		{ after(grammarAccess.getLengthConversionAccess().getLengthValueIntExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__InitialLengthAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLengthConversionAccess().getInitialLengthLengthUnitsEnumRuleCall_3_0()); }
		ruleLengthUnits
		{ after(grammarAccess.getLengthConversionAccess().getInitialLengthLengthUnitsEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthConversion__ConvertedLengthAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLengthConversionAccess().getConvertedLengthLengthUnitsEnumRuleCall_6_0()); }
		ruleLengthUnits
		{ after(grammarAccess.getLengthConversionAccess().getConvertedLengthLengthUnitsEnumRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__TimeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeConversionAccess().getTimeIntExpressionParserRuleCall_1_0()); }
		ruleIntExpression
		{ after(grammarAccess.getTimeConversionAccess().getTimeIntExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__InitialTimeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeConversionAccess().getInitialTimeTimeUnitsEnumRuleCall_3_0()); }
		ruleTimeUnits
		{ after(grammarAccess.getTimeConversionAccess().getInitialTimeTimeUnitsEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConversion__ConvertedTimeAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeConversionAccess().getConvertedTimeTimeUnitsEnumRuleCall_6_0()); }
		ruleTimeUnits
		{ after(grammarAccess.getTimeConversionAccess().getConvertedTimeTimeUnitsEnumRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0()); }
		ruleREAL
		{ after(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarExpression__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
