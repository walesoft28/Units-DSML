/*
 * generated by Xtext 2.24.0
 */
grammar InternalUnits;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.group32.units.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.group32.units.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.group32.units.services.UnitsGrammarAccess;

}

@parser::members {

 	private UnitsGrammarAccess grammarAccess;

    public InternalUnitsParser(TokenStream input, UnitsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Units";
   	}

   	@Override
   	protected UnitsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleUnits
entryRuleUnits returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitsRule()); }
	iv_ruleUnits=ruleUnits
	{ $current=$iv_ruleUnits.current; }
	EOF;

// Rule Units
ruleUnits returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getUnitsAccess().getStatementStatementsParserRuleCall_0());
			}
			lv_statement_0_0=ruleStatements
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getUnitsRule());
				}
				add(
					$current,
					"statement",
					lv_statement_0_0,
					"uk.ac.kcl.group32.units.Units.Statements");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatements
entryRuleStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	iv_ruleStatements=ruleStatements
	{ $current=$iv_ruleStatements.current; }
	EOF;

// Rule Statements
ruleStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getMassConversionParserRuleCall_0());
		}
		this_MassConversion_0=ruleMassConversion
		{
			$current = $this_MassConversion_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getLengthConversionParserRuleCall_1());
		}
		this_LengthConversion_1=ruleLengthConversion
		{
			$current = $this_LengthConversion_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getTimeConversionParserRuleCall_2());
		}
		this_TimeConversion_2=ruleTimeConversion
		{
			$current = $this_TimeConversion_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getVariableDeclarationParserRuleCall_3());
		}
		this_VariableDeclaration_3=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='let'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getLetKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMassConversion
entryRuleMassConversion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMassConversionRule()); }
	iv_ruleMassConversion=ruleMassConversion
	{ $current=$iv_ruleMassConversion.current; }
	EOF;

// Rule MassConversion
ruleMassConversion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='convert'
		{
			newLeafNode(otherlv_0, grammarAccess.getMassConversionAccess().getConvertKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMassConversionAccess().getMassValueIntExpressionParserRuleCall_1_0());
				}
				lv_massValue_1_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMassConversionRule());
					}
					set(
						$current,
						"massValue",
						lv_massValue_1_0,
						"uk.ac.kcl.group32.units.Units.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getMassConversionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMassConversionAccess().getInitialMassValueMassUnitsEnumRuleCall_3_0());
				}
				lv_initialMassValue_3_0=ruleMassUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMassConversionRule());
					}
					set(
						$current,
						"initialMassValue",
						lv_initialMassValue_3_0,
						"uk.ac.kcl.group32.units.Units.MassUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getMassConversionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='to'
		{
			newLeafNode(otherlv_5, grammarAccess.getMassConversionAccess().getToKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMassConversionAccess().getConvertedMassValueMassUnitsEnumRuleCall_6_0());
				}
				lv_convertedMassValue_6_0=ruleMassUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMassConversionRule());
					}
					set(
						$current,
						"convertedMassValue",
						lv_convertedMassValue_6_0,
						"uk.ac.kcl.group32.units.Units.MassUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLengthConversion
entryRuleLengthConversion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLengthConversionRule()); }
	iv_ruleLengthConversion=ruleLengthConversion
	{ $current=$iv_ruleLengthConversion.current; }
	EOF;

// Rule LengthConversion
ruleLengthConversion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='convert'
		{
			newLeafNode(otherlv_0, grammarAccess.getLengthConversionAccess().getConvertKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLengthConversionAccess().getLengthValueIntExpressionParserRuleCall_1_0());
				}
				lv_lengthValue_1_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLengthConversionRule());
					}
					set(
						$current,
						"lengthValue",
						lv_lengthValue_1_0,
						"uk.ac.kcl.group32.units.Units.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getLengthConversionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLengthConversionAccess().getInitialLengthLengthUnitsEnumRuleCall_3_0());
				}
				lv_initialLength_3_0=ruleLengthUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLengthConversionRule());
					}
					set(
						$current,
						"initialLength",
						lv_initialLength_3_0,
						"uk.ac.kcl.group32.units.Units.LengthUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getLengthConversionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='to'
		{
			newLeafNode(otherlv_5, grammarAccess.getLengthConversionAccess().getToKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLengthConversionAccess().getConvertedLengthLengthUnitsEnumRuleCall_6_0());
				}
				lv_convertedLength_6_0=ruleLengthUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLengthConversionRule());
					}
					set(
						$current,
						"convertedLength",
						lv_convertedLength_6_0,
						"uk.ac.kcl.group32.units.Units.LengthUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTimeConversion
entryRuleTimeConversion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeConversionRule()); }
	iv_ruleTimeConversion=ruleTimeConversion
	{ $current=$iv_ruleTimeConversion.current; }
	EOF;

// Rule TimeConversion
ruleTimeConversion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='convert'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeConversionAccess().getConvertKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeConversionAccess().getTimeIntExpressionParserRuleCall_1_0());
				}
				lv_time_1_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeConversionRule());
					}
					set(
						$current,
						"time",
						lv_time_1_0,
						"uk.ac.kcl.group32.units.Units.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getTimeConversionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeConversionAccess().getInitialTimeTimeUnitsEnumRuleCall_3_0());
				}
				lv_initialTime_3_0=ruleTimeUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeConversionRule());
					}
					set(
						$current,
						"initialTime",
						lv_initialTime_3_0,
						"uk.ac.kcl.group32.units.Units.TimeUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getTimeConversionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='to'
		{
			newLeafNode(otherlv_5, grammarAccess.getTimeConversionAccess().getToKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeConversionAccess().getConvertedTimeTimeUnitsEnumRuleCall_6_0());
				}
				lv_convertedTime_6_0=ruleTimeUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeConversionRule());
					}
					set(
						$current,
						"convertedTime",
						lv_convertedTime_6_0,
						"uk.ac.kcl.group32.units.Units.TimeUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIntExpression
entryRuleIntExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntExpressionRule()); }
	iv_ruleIntExpression=ruleIntExpression
	{ $current=$iv_ruleIntExpression.current; }
	EOF;

// Rule IntExpression
ruleIntExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIntExpressionAccess().getIntLiteralParserRuleCall_0());
		}
		this_IntLiteral_0=ruleIntLiteral
		{
			$current = $this_IntLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntExpressionAccess().getIntVarExpressionParserRuleCall_1());
		}
		this_IntVarExpression_1=ruleIntVarExpression
		{
			$current = $this_IntVarExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntExpressionAccess().getRealLiteralParserRuleCall_2());
		}
		this_RealLiteral_2=ruleRealLiteral
		{
			$current = $this_RealLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	iv_ruleIntLiteral=ruleIntLiteral
	{ $current=$iv_ruleIntLiteral.current; }
	EOF;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_INT
			{
				newLeafNode(lv_val_0_0, grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	iv_ruleRealLiteral=ruleRealLiteral
	{ $current=$iv_ruleRealLiteral.current; }
	EOF;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0());
			}
			lv_val_0_0=ruleREAL
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRealLiteralRule());
				}
				set(
					$current,
					"val",
					lv_val_0_0,
					"uk.ac.kcl.group32.units.Units.REAL");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleIntVarExpression
entryRuleIntVarExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntVarExpressionRule()); }
	iv_ruleIntVarExpression=ruleIntVarExpression
	{ $current=$iv_ruleIntVarExpression.current; }
	EOF;

// Rule IntVarExpression
ruleIntVarExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntVarExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getREALRule()); }
	iv_ruleREAL=ruleREAL
	{ $current=$iv_ruleREAL.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getREALAccess().getINTTerminalRuleCall_0());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getREALAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getREALAccess().getINTTerminalRuleCall_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Rule MassUnits
ruleMassUnits returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='kg'
			{
				$current = grammarAccess.getMassUnitsAccess().getKgEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMassUnitsAccess().getKgEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='g'
			{
				$current = grammarAccess.getMassUnitsAccess().getGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMassUnitsAccess().getGEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule TimeUnits
ruleTimeUnits returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='hr'
			{
				$current = grammarAccess.getTimeUnitsAccess().getHrEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTimeUnitsAccess().getHrEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='m'
			{
				$current = grammarAccess.getTimeUnitsAccess().getMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTimeUnitsAccess().getMEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='s'
			{
				$current = grammarAccess.getTimeUnitsAccess().getSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTimeUnitsAccess().getSEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule LengthUnits
ruleLengthUnits returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='km'
			{
				$current = grammarAccess.getLengthUnitsAccess().getKmEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLengthUnitsAccess().getKmEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='m'
			{
				$current = grammarAccess.getLengthUnitsAccess().getMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLengthUnitsAccess().getMEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='cm'
			{
				$current = grammarAccess.getLengthUnitsAccess().getCmEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLengthUnitsAccess().getCmEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
