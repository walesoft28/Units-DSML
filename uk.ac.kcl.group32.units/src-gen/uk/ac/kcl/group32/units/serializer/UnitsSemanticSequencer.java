/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.group32.units.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.group32.units.services.UnitsGrammarAccess;
import uk.ac.kcl.group32.units.units.IntLiteral;
import uk.ac.kcl.group32.units.units.IntVarExpression;
import uk.ac.kcl.group32.units.units.LengthConversion;
import uk.ac.kcl.group32.units.units.MassConversion;
import uk.ac.kcl.group32.units.units.RealLiteral;
import uk.ac.kcl.group32.units.units.TimeConversion;
import uk.ac.kcl.group32.units.units.Units;
import uk.ac.kcl.group32.units.units.UnitsPackage;
import uk.ac.kcl.group32.units.units.VariableDeclaration;

@SuppressWarnings("all")
public class UnitsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UnitsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UnitsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UnitsPackage.INT_LITERAL:
				sequence_IntLiteral(context, (IntLiteral) semanticObject); 
				return; 
			case UnitsPackage.INT_VAR_EXPRESSION:
				sequence_IntVarExpression(context, (IntVarExpression) semanticObject); 
				return; 
			case UnitsPackage.LENGTH_CONVERSION:
				sequence_LengthConversion(context, (LengthConversion) semanticObject); 
				return; 
			case UnitsPackage.MASS_CONVERSION:
				sequence_MassConversion(context, (MassConversion) semanticObject); 
				return; 
			case UnitsPackage.REAL_LITERAL:
				sequence_RealLiteral(context, (RealLiteral) semanticObject); 
				return; 
			case UnitsPackage.TIME_CONVERSION:
				sequence_TimeConversion(context, (TimeConversion) semanticObject); 
				return; 
			case UnitsPackage.UNITS:
				sequence_Units(context, (Units) semanticObject); 
				return; 
			case UnitsPackage.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     IntExpression returns IntLiteral
	 *     IntLiteral returns IntLiteral
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_IntLiteral(ISerializationContext context, IntLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.INT_LITERAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.INT_LITERAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntExpression returns IntVarExpression
	 *     IntVarExpression returns IntVarExpression
	 *
	 * Constraint:
	 *     var=[VariableDeclaration|ID]
	 */
	protected void sequence_IntVarExpression(ISerializationContext context, IntVarExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.INT_VAR_EXPRESSION__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.INT_VAR_EXPRESSION__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1(), semanticObject.eGet(UnitsPackage.Literals.INT_VAR_EXPRESSION__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statements returns LengthConversion
	 *     LengthConversion returns LengthConversion
	 *
	 * Constraint:
	 *     (lengthValue=IntExpression initialLength=LengthUnits convertedLength=LengthUnits)
	 */
	protected void sequence_LengthConversion(ISerializationContext context, LengthConversion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.LENGTH_CONVERSION__LENGTH_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.LENGTH_CONVERSION__LENGTH_VALUE));
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.LENGTH_CONVERSION__INITIAL_LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.LENGTH_CONVERSION__INITIAL_LENGTH));
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.LENGTH_CONVERSION__CONVERTED_LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.LENGTH_CONVERSION__CONVERTED_LENGTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLengthConversionAccess().getLengthValueIntExpressionParserRuleCall_1_0(), semanticObject.getLengthValue());
		feeder.accept(grammarAccess.getLengthConversionAccess().getInitialLengthLengthUnitsEnumRuleCall_3_0(), semanticObject.getInitialLength());
		feeder.accept(grammarAccess.getLengthConversionAccess().getConvertedLengthLengthUnitsEnumRuleCall_6_0(), semanticObject.getConvertedLength());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statements returns MassConversion
	 *     MassConversion returns MassConversion
	 *
	 * Constraint:
	 *     (massValue=IntExpression initialMassValue=MassUnits convertedMassValue=MassUnits)
	 */
	protected void sequence_MassConversion(ISerializationContext context, MassConversion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.MASS_CONVERSION__MASS_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.MASS_CONVERSION__MASS_VALUE));
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.MASS_CONVERSION__INITIAL_MASS_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.MASS_CONVERSION__INITIAL_MASS_VALUE));
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.MASS_CONVERSION__CONVERTED_MASS_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.MASS_CONVERSION__CONVERTED_MASS_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMassConversionAccess().getMassValueIntExpressionParserRuleCall_1_0(), semanticObject.getMassValue());
		feeder.accept(grammarAccess.getMassConversionAccess().getInitialMassValueMassUnitsEnumRuleCall_3_0(), semanticObject.getInitialMassValue());
		feeder.accept(grammarAccess.getMassConversionAccess().getConvertedMassValueMassUnitsEnumRuleCall_6_0(), semanticObject.getConvertedMassValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntExpression returns RealLiteral
	 *     RealLiteral returns RealLiteral
	 *
	 * Constraint:
	 *     val=REAL
	 */
	protected void sequence_RealLiteral(ISerializationContext context, RealLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.REAL_LITERAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.REAL_LITERAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statements returns TimeConversion
	 *     TimeConversion returns TimeConversion
	 *
	 * Constraint:
	 *     (time=IntExpression initialTime=TimeUnits convertedTime=TimeUnits)
	 */
	protected void sequence_TimeConversion(ISerializationContext context, TimeConversion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.TIME_CONVERSION__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.TIME_CONVERSION__TIME));
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.TIME_CONVERSION__INITIAL_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.TIME_CONVERSION__INITIAL_TIME));
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.TIME_CONVERSION__CONVERTED_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.TIME_CONVERSION__CONVERTED_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeConversionAccess().getTimeIntExpressionParserRuleCall_1_0(), semanticObject.getTime());
		feeder.accept(grammarAccess.getTimeConversionAccess().getInitialTimeTimeUnitsEnumRuleCall_3_0(), semanticObject.getInitialTime());
		feeder.accept(grammarAccess.getTimeConversionAccess().getConvertedTimeTimeUnitsEnumRuleCall_6_0(), semanticObject.getConvertedTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Units returns Units
	 *
	 * Constraint:
	 *     statement+=Statements+
	 */
	protected void sequence_Units(ISerializationContext context, Units semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statements returns VariableDeclaration
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (name=ID value=INT)
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.VARIABLE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.VARIABLE_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, UnitsPackage.Literals.VARIABLE_DECLARATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnitsPackage.Literals.VARIABLE_DECLARATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
